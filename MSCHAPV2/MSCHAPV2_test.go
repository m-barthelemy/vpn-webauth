// From https://github.com/keysonZZZ/kmg/blob/master/third/kmgRadius/MSCHAPV2/packet_test.go

package MSCHAPV2

// TODO: make them run and pass
/*
func TestChallengePacket(ot *testing.T) {
	p1in := &ChallengePacket{
		Identifier: 100,
		Challenge:  [16]byte{0x24, 0xdc, 0x3d, 0x6d, 0xb5, 0x66, 0xed, 0x25, 0xe4, 0x90, 0x49, 0x2c, 0x6e, 0xa2, 0x65, 0xcd},
		Name:       "test name",
	}
	p1Byte := p1in.Encode()
	p1outI, err := Decode(p1Byte)
	Equal(err, nil)
	p1out, ok := p1outI.(*ChallengePacket)
	Equal(ok, true)
	Equal(*p1in, *p1out)
}

func TestResponsePacket(ot *testing.T) {
	p1in := &ResponsePacket{
		Identifier:    100,
		PeerChallenge: [16]byte{0x24, 0xdc, 0x3d, 0x6d, 0xb5, 0x66, 0xed, 0x25, 0xe4, 0x90, 0x49, 0x2c, 0x6e, 0xa2, 0x65, 0xcd},
		NTResponse: [24]byte{0x24, 0xdc, 0x3d, 0x6d, 0xb5, 0x66, 0xed, 0x25, 0xe4, 0x90, 0x49, 0x2c, 0x6e, 0xa2, 0x65, 0xcd,
			0x24, 0xdc, 0x3d, 0x6d, 0xb5, 0x66, 0xed, 0x25},
		Name: "test name",
	}
	p1Byte := p1in.Encode()
	Equal(p1Byte, []byte{0x2, 0x64, 0x0, 0x3f, 0x31, 0x24, 0xdc, 0x3d, 0x6d, 0xb5, 0x66, 0xed, 0x25, 0xe4, 0x90, 0x49,
		0x2c, 0x6e, 0xa2, 0x65, 0xcd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x24, 0xdc, 0x3d, 0x6d, 0xb5, 0x66,
		0xed, 0x25, 0xe4, 0x90, 0x49, 0x2c, 0x6e, 0xa2, 0x65, 0xcd, 0x24, 0xdc, 0x3d, 0x6d, 0xb5, 0x66, 0xed, 0x25,
		0x0, 0x74, 0x65, 0x73, 0x74, 0x20, 0x6e, 0x61, 0x6d, 0x65})
	p1outI, err := Decode(p1Byte)
	Equal(err, nil)
	p1out, ok := p1outI.(*ResponsePacket)
	Equal(ok, true)
	Equal(*p1in, *p1out)
}

func TestSuccessPacket(ot *testing.T) {
	p1in := &SuccessPacket{
		Identifier: 100,
		Auth: [20]byte{0x24, 0xdc, 0x3d, 0x6d, 0xb5, 0x66, 0xed, 0x25, 0xe4, 0x90, 0x49, 0x2c, 0x6e, 0xa2,
			0x65, 0xcd, 0x24, 0xdc, 0x3d, 0x6d},
		Message: "test name",
	}
	p1Byte := p1in.Encode()
	Equal(p1Byte, []byte{0x3, //OpCodeSuccess
		0x64,      //Identifier
		0x0, 0x3a, //length
		0x53, 0x3d, //S=
		0x32, 0x34, 0x44, 0x43, 0x33, 0x44, 0x36, 0x44, 0x42, 0x35, 0x36, 0x36, 0x45, 0x44, 0x32, 0x35, 0x45, 0x34, 0x39, 0x30, 0x34, 0x39, 0x32, 0x43, 0x36, 0x45, 0x41, 0x32, 0x36, 0x35, 0x43, 0x44, 0x32, 0x34, 0x44, 0x43, 0x33, 0x44, 0x36, 0x44, 0x20, 0x4d, 0x3d, 0x74, 0x65, 0x73, 0x74, 0x20, 0x6e, 0x61, 0x6d, 0x65})
	p1outI, err := Decode(p1Byte)
	Equal(err, nil)
	p1out, ok := p1outI.(*SuccessPacket)
	Equal(ok, true)
	Equal(*p1in, *p1out)
}


func TestLogFromStrongswan(ot *testing.T) {
	//step 1. server to client ChallengePacket

	inByte := []byte{0x01, 0x22, 0x00, 0x1F, 0x10, 0xF2, 0x44, 0xDD, 0xC7, 0xBE, 0x70, 0x3F, 0x10, 0x2A,
		0x8D, 0xC6, 0xAF, 0xAB, 0xA7, 0x9E, 0x2E, 0x73, 0x74, 0x72, 0x6F, 0x6E, 0x67, 0x53, 0x77, 0x61, 0x6E}
	p1outI, err := Decode(inByte)
	Equal(err, nil)
	p1out, ok := p1outI.(*ChallengePacket)
	Equal(ok, true)
	Equal(p1out.Identifier, uint8(0x22))
	Equal(p1out.Challenge, [16]byte{0xf2, 0x44, 0xdd, 0xc7, 0xbe, 0x70, 0x3f, 0x10, 0x2a, 0x8d, 0xc6, 0xaf, 0xab, 0xa7, 0x9e, 0x2e})
	Equal(p1out.Name, "strongSwan")
	Equal(p1out.Encode(), inByte)

	//step 2. client to server response packet
	inByte2 := []byte{0x02, 0x22, 0x00, 0x46, 0x31, 0x84, 0xF5, 0xF7, 0xFD, 0xC8, 0x3A, 0x25, 0x22, 0x31,
		0x18, 0x12, 0x17, 0x02, 0x8F, 0xA4, 0xF3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA3, 0x0C, 0x3A, 0xD4, 0xE9, 0x13,
		0x69, 0xBF, 0x6E, 0x66, 0x6E, 0x13, 0xBD, 0x19, 0x7F, 0x05, 0xF0, 0xF2, 0x7A, 0x4D, 0xC2, 0x9A, 0xCA, 0x17, 0x00, 0x51, 0x36,
		0x56, 0x67, 0x74, 0x71, 0x64, 0x55, 0x34, 0x58, 0x4F, 0x57, 0x38, 0x72, 0x4A, 0x70}
	p2outI, err := Decode(inByte2)
	Equal(err, nil)
	p2out, ok := p2outI.(*ResponsePacket)
	Equal(ok, true)
	Equal(p2out.Identifier, uint8(0x22))
	Equal(p2out.NTResponse, [24]uint8{0xa3, 0xc, 0x3a, 0xd4, 0xe9, 0x13, 0x69, 0xbf, 0x6e, 0x66, 0x6e, 0x13, 0xbd, 0x19, 0x7f, 0x5, 0xf0, 0xf2, 0x7a, 0x4d, 0xc2, 0x9a, 0xca, 0x17})
	Equal(p2out.PeerChallenge, [16]uint8{0x84, 0xf5, 0xf7, 0xfd, 0xc8, 0x3a, 0x25, 0x22, 0x31, 0x18, 0x12, 0x17, 0x2, 0x8f, 0xa4, 0xf3})
	Equal(p2out.Name, "Q6VgtqdU4XOW8rJp")

	//step 3. server to client success packet
	inByte3 := []byte{0x03, 0x22, 0x00, 0x44, 0x53, 0x3D, 0x34, 0x36, 0x41, 0x35, 0x43, 0x30, 0x46, 0x41,
		0x43, 0x35, 0x39, 0x44, 0x43, 0x41, 0x43, 0x31, 0x45, 0x46, 0x41, 0x41, 0x39, 0x45, 0x31, 0x46, 0x45, 0x42, 0x37, 0x36, 0x36, 0x30,
		0x42, 0x36, 0x42, 0x41, 0x33, 0x30, 0x38, 0x44, 0x33, 0x39, 0x20, 0x4D, 0x3D, 0x57, 0x65, 0x6C, 0x63, 0x6F, 0x6D, 0x65, 0x32, 0x73,
		0x74, 0x72, 0x6F, 0x6E, 0x67, 0x53, 0x77, 0x61, 0x6E, 0x00}
	p3outI, err := Decode(inByte3)
	Equal(err, nil)
	p3out, ok := p3outI.(*SuccessPacket)
	Equal(ok, true)
	Equal(p3out.Identifier, uint8(0x22))
	Equal(p3out.Auth, [20]byte{0x46, 0xa5, 0xc0, 0xfa, 0xc5, 0x9d, 0xca, 0xc1, 0xef, 0xaa, 0x9e, 0x1f, 0xeb, 0x76, 0x60,
		0xb6, 0xba, 0x30, 0x8d, 0x39})
	Equal(p3out.Message, "Welcome2strongSwan\x00")
	Equal(p3out.Encode(), inByte3)

	//verfiy we crypto correct
	p3outget := ReplySuccessPacket(&ReplySuccessPacketRequest{
		AuthenticatorChallenge: p1out.Challenge,
		Response:               p2out,
		Username:               []byte("Q6VgtqdU4XOW8rJp"),
		Password:               []byte("GSxy6JM2t4vZYKXO"),
		Message:                "Welcome2strongSwan\x00",
	})
	Equal(p3outget.Encode(), inByte3)
	//step 4. client to server sucess packet

}
*/
